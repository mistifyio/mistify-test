- hosts: localhost
  connection: local
  tasks:
    - name: Check if public key exists
      stat: path={{ lookup('env','HOME') }}/.ssh/id_rsa.pub
      register: local_pub_key_exists
      tags: ['test_only', 'create_only','openvswitch_setup_only']

      # TODO: Add code to generate a set of keys in the event a public key does not exist
    - name: Grab public key off machine
      shell: "cat {{ lookup('env','HOME') }}/.ssh/id_rsa.pub"
      register: local_pub_key
      tags: ['test_only', 'create_only','openvswitch_setup_only']

    - name: Add lxc config to handle openvswitch quirks
      template: src="templates/container_config" dest="/tmp/{{test_container_name}}-lxc-config"
      sudo: yes
      tags: openvswitch_setup_only

    - name: Create the test container
      lxc_container:
        name: "{{test_container_name}}"
        container_log: true
        template: download
        state: stopped
        template_options: --dist ubuntu --arch amd64 --release trusty
        config: "/tmp/{{test_container_name}}-lxc-config"
      tags: ['test_only', 'create_only', 'openvswitch_setup_only']

    - name: Ensure container config dir exists
      file: path="/var/lib/lxc/{{test_container_name}}" state=directory mode=0755
      tags: openvswitch_setup_only
      sudo: yes

    - name: Add openvswitch hook to container
      template:  src="templates/autodev" dest="/var/lib/lxc/{{test_container_name}}/autodev" mode=0755
      sudo: yes
      tags: openvswitch_setup_only

    - name: Start container and wait 5 sec for the network to be available
      lxc_container:
        name: "{{test_container_name}}"
        state: started
        container_log: true

    - pause: seconds=5

    - name: Configure ubuntu user and ssh setup
      lxc_container:
        name: "{{test_container_name}}"
        container_command: |
          mkdir -p /root/.ssh
          mkdir -p {{lxc_user_home}}/.ssh
          echo {{local_pub_key.stdout}} > /root/.ssh/authorized_keys
          echo {{local_pub_key.stdout}} > {{lxc_user_home}}/.ssh/authorized_keys
          echo StrictHostKeyChecking no > /root/.ssh/config
          echo StrictHostKeyChecking no > {{lxc_user_home}}/.ssh/config
          chown -R {{lxc_user}}:{{lxc_user_group}} {{lxc_user_home}}/.ssh
          apt-get update
          apt-get install -y openssh-server apt-transport-https
          service ssh restart
      tags: ['test_only', 'create_only', 'openvswitch_setup_only']
      register: lxc_container_info_running

    - name: register new container hostname
      add_host: name="{{lxc_container_info_running.lxc_container.ips[0]}}" groups="go-mistify-libvirt-test-firststart"
      tags: ['test_only','openvswitch_setup_only']
  tags: provision_only

# Install as root, to setup ubuntu as a sudoer
- hosts: go-mistify-libvirt-test-firststart
  remote_user: root
  vars_files:
      - 'vars/vaulted_vars'
  roles:
    - yaegashi.blockinfile
    - { role: general-setup }
  tasks:
  tags: provision_only


# Install as ubuntu
- hosts: go-mistify-libvirt-test-firststart
  remote_user: ubuntu
  sudo: yes
  roles:
    - { role: kbrebanov.unzip }
    - { role: bobbyrenwick.pip }
    - { role: required-python-modules }
    - role: gotansible.golang
      golang_version: 1.4.2
      golang_per_user: false
      tags: golang
    - { role: golang-deps, tags: ['golang'] }
    - { role: openvswitch, tags: ['openvswitch'] }
    - { role: mistify-openvswitch-config, tags: ['openvswitch','openvswitch-config'] }
    - role: laggyluke.add-ssh-keys-from-github
      add_ssh_keys_from_github:
        usernames:
          - omniti-devops
  tags: provision_only

# Restart the container after installations - mainly for openvswitch
# - hosts: localhost
#   connection: local
#   tasks:
#     - name: Restart the container (stop)
#       lxc_container:
#         name: "{{test_container_name}}"
#         state: stopped

#     - name: Restart the container (start)
#       lxc_container:
#         name: "{{test_container_name}}"
#         state: started
#         container_log: true
#         container_command: sleep 3
#       register: lxc_container_info_restarted

#     - name: register new container hostname
#       add_host: name="{{lxc_container_info_restarted.lxc_container.ips[0]}}" groups="go-mistify-libvirt-test-secondstart"
#       tags: ['test_only','openvswitch_setup_only']

#     - pause: seconds=3
#   tags: ['secondstart', 'provision_only','checkout_src']

- hosts: go-mistify-libvirt-test
  remote_user: ubuntu
  sudo: yes
  roles:
  tasks:
    - name: Copy go test executor script to container
      template: src=templates/go_test_executor.py dest=/tmp/go_test_executor.py owner={{lxc_user}} group={{lxc_user_group}} mode=0755
      tags: ['test_only', 'checkout_src']

    - name: Delete checkout dir on container if exists
      file: path={{remote_checkout_dir}} state=absent
      tags: ['test_only', 'checkout_src']

    - name: Create checkout dir on container
      file: path={{remote_checkout_dir}} state=directory owner={{lxc_user}} group={{lxc_user_group}} mode=0775 recurse=yes
      tags: ['test_only', 'checkout_src']

    - name: Copy existing checkout to container
      copy: src={{local_checkout_dir}} dest={{remote_checkout_dir}}
      when: use_existing_checkout
      tags: ['test_only', 'checkout_src']

    - name: Clone repo on container
      shell: git clone {{mistify_agent_repo_url}} {{remote_checkout_dir}}
      when: not use_existing_checkout
      tags: ['test_only', 'checkout_src']

    - name: Run go kvm tests
      shell: |
        export WORKSPACE={{lxc_user_home}}/workspace
        export GOPATH=$WORKSPACE
        export PATH=/usr/local/go/bin:$PATH
        export REPO={{mistify_agent_repo_name}}
        export CHECKOUT_DIR={{remote_checkout_dir}}
        cd $WORKSPACE
        python /tmp/go_test_executor.py
      tags: test_only
  tags: secondstart

- hosts: localhost
  connection: local
  tasks:
    - name: Copy test results to localhost
      shell: scp {{lxc_user}}@{{lxc_container_info_running.lxc_container.ips[0]}}:{{lxc_user_home}}/workspace/test_results.xml .
    # - name: Destroy the container
    #   lxc_container:
    #     name: "{{test_container_name}}"
    #     state: absent

