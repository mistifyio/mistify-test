*** Settings ***
Documentation   This prepares the SDK container by setting up a normal user
...  of the same name as the user running this script. In addition, the
...  seed toolchain it installed and then used to build crosstools-ng for
...  the Mistify-OS environment. This can then be used to build Mistify-OS.
...
...	This leaves with the container still running and the node VMs running
...	in the context of the container.
...
...	Scripts were generated in ~/tmp for starting nodes with the same
...	attributes.
...	The disk images following the initial boot are saved so that states can
...	be restored simply by copying the node initial disk image to the node
...	running disk image.

Library		String
Library		Collections

#+
# NOTE: The variable TESTLIBDIR is passed from the command line by the testmistify
# script. There is no default value for this variable.
#-
Resource	${TESTLIBDIR}/config/mistify.robot
Resource	${TESTLIBDIR}/resources/ssh.robot
Resource	${TESTLIBDIR}/resources/lxc.robot

Resource	${TESTLIBDIR}/resources/node-helpers.robot

Suite Setup             Setup Testsuite
Suite Teardown          Teardown Testsuite

*** Variables ***
${nodesconfig}		${MISTIFY_NODES_CONFIG_FILE}

*** Test Cases ***
Verify Container Is Running
    [Tags]	Net-config
    ${_rc}=	Is Container Running	${containername}
    Should Be Equal As Integers	${_rc}	1

Get Container IP Address
    [Tags]	Net-config
    Log To Console	\n
    ${_o}=	Container IP Address	${containername}
    Log To Console	\nContainer IP address: ${_o}
    Should Contain X Times	${_o}  \.  3
    Set Suite Variable	${ip}  ${_o}
    Log To Console	\nContainer IP address is: ${ip}

Login To Container
    [Tags]	Net-config
    Log To Console  \nLogging in as ${USER} to container at IP: ${ip}
    Login to SUT  ${ip}  ${USER}  ${USER}
    ${_o}=  SSH Run And Get Output  pwd
    ${homedir}=  Get Line  ${_o}  0
    Should Contain  ${homedir}  /home/${USER}
    Set Suite Variable  ${homedir}
    Log To Console  Home directory is: ${homedir}

Collect Node Attributes
    [Documentation]  Collect the node attributes for use by the other tests.
    ...
    ...  NOTE: Since "Collect Attributes" creates a global scope variable
    ...  (${Nodes}) any test suites following this one will be able to access
    ...  the already collected atributes for each of the test nodes.
    Collect SDK Attributes

Log Node Attributes
    :FOR  ${_n}  IN  @{MISTIFY_SDK_NODES}
    \  ${_a}=  Get From Dictionary  ${Nodes}  ${_n}
    \  ${_uuid}=  Get From Dictionary  ${_a}  uuid
    \  ${_if}=  Get From Dictionary  ${_a}  if
    \  ${_ip}=  Get From Dictionary  ${_a}  ip
    \  ${_mac}=  Get From Dictionary  ${_a}  mac
    \  Log Message  \n----\nNode: ${_n}
    \  Log Message  uuid: ${_uuid}
    \  Log Message  network interface: ${_if}
    \  Log Message  ip: ${_ip}
    \  Log Message  mac: ${_mac}

Generate The Node Attribute List
    [Documentation]	Using the Nodes variable a shell script is generated
    ...			containing variables which can be used by other scripts.
    [Tags]	Net-config
    ${_iflist}=  catenate  \nifs=(
    ${_uuidlist}=  catenate  \nuuids=(
    ${_iplist}=  catenate  \ninitialips=(
    ${_maclist}=  catenate  \nmacs=(
    :FOR  ${_n}  IN  @{MISTIFY_SDK_NODES}
    \  ${_a}=  Get From Dictionary  ${Nodes}  ${_n}
    \  ${_uuid}=  Get From Dictionary  ${_a}  uuid
    \  ${_if}=  Get From Dictionary  ${_a}  if
    \  ${_ip}=  Get From Dictionary  ${_a}  ip
    \  ${_mac}=  Get From Dictionary  ${_a}  mac
    \  Log To Console  \nNode ${_n}
    \  Log To Console  uuid: ${_uuid}
    \  Log To Console  network interface: ${_if}
    \  Log To Console  ip: ${_ip}
    \  Log To Console  mac: ${_mac}
    \  ${_iflist}=  catenate  ${_iflist}  \n'${_if}'
    \  ${_uuidlist}=  catenate  ${_uuidlist}  \n'${_uuid}'
    \  ${_iplist}=  catenate  ${_iplist}  \n'${_ip}'
    \  ${_maclist}=  catenate  ${_maclist}  \n'${_mac}'
    ${_iflist}=  catenate  ${_iflist}  \n)\n
    ${_uuidlist}=  catenate  ${_uuidlist}  \n)\n
    ${_iplist}=  catenate  ${_iplist}  \n)\n
    ${_maclist}=  catenate  ${_maclist}  \n)\n
    Log To Console  ${_uuidlist} ${_iplist} ${_maclist}
    ${NodesScript}=  catenate
    ...  \# nodes.sh: Generated by: ${SUITE NAME}
    ...  \n\# This is for reference only in an SDK node.\n
    ...  \nnm=${MISTIFY_SDK_NET_MASK_BITS}
    ...  \ngw=${MISTIFY_SDK_GATEWAY_IP}\n
    ...  \n${_iflist} ${_uuidlist} ${_iplist} ${_maclist}\n

    # local copy
    Create File  tmp/${nodesconfig}  ${NodesScript}
    # copy in the container.
    ${_of}=  catenate
    ...  mkdir -p tmp; cat >tmp/${nodesconfig} << EOF\n
    ...  ${NodesScript}
    ...  \nEOF
    SSH Run  ${_of}
    Set Suite Variable  ${NodesScript}

Install Node Attribute List On The Primary Node
    [Tags]	Net-config
    Use Node  @{MISTIFY_SDK_NODES}[0]
    ${_of}=  catenate
    ...  cat >/root/${nodesconfig} << EOF\n
    ...  ${NodesScript}
    ...  \nEOF
    SSH Run  ${_of}
    Release Node

Install SDK Node Net Config
    [Documentation]  This generates network config files for SDK nodes.
    ...
    ...	These are installed in the /root directory for later use.
    ${_c}=  catenate
    ...  cat > /root/resolv.conf.test <<EOF\n
    ...  nameserver ${MISTIFY_SDK_GATEWAY_IP}\n
    ...  \nEOF
    :FOR  ${_n}  IN  @{MISTIFY_SDK_NODES}
    \  Use Node  ${_n}
    \  SSH Run  ${_c}
    \  SSH Run  cp /etc/resolv.conf resolv.conf.original
    \  Release Node

*** Keywords ***
Setup Testsuite
    ${containername}=	Container Name
    Set Suite Variable  ${containername}
    Set Suite Variable  ${rootprompt}  root\@${containername}
    Set Suite Variable  ${userprompt}  ${USER}\@${containername}
    Log To Console  containername = ${containername}
    Log To Console  rootprompt = ${rootprompt}
    Log To Console  userprompt = ${userprompt}

    ${_rc}=	Use Container
    ...	${containername}  ${DISTRO_NAME}
    ...	${DISTRO_VERSION_NAME}	${DISTRO_ARCH}
    Log To Console	\nUsing container: ${containername}
    Run Keyword Unless  ${_rc} == 0
    ...	Log To Console	\nContainer could not be started.
    ...		WARN

Teardown Testsuite
    Disconnect From SUT
    # Stop Container	${containername}

